BENZINA Amina
SHCHERBAKOVA Iuliia

1.2  L’utilitaire base64

Q2. Pour que l'encodage d'un fichier en base64 ne contient aucun symbole =, il faut que sa taille soit divisible par 3. Car en le multipliant par 8 , le resultat sera divisible par 2. Et par suite il sera divisible par 3 et par 2 et ainsi par 6.

    Pour que l'encodage d'un fichier en base 64 ne contient qu'un seul symbole = , il faut que sa taille s'ecrit de la forme 3x+2, x un entier. en effet  si on suppose que d est la taille du fichier alors pour avoir qu'un seul symbole il faut que d*8= 6k+4, avec k un entier. Par suite il faut resoudre l'équation diophantienne d*8 - 6*k = 4 (d*4 - k*3 =2 : cette equation admet des solution car 4^3 =1). On trouve que les solutions de d sont 3x+2. 

   Pour que l'encodage d'un ficher en base 64 ne contient 2 symbole = , il faut resoudre l'equation d*8= 6k+2, avec d la taille du fichier et k un entier. et ainsi il faut resoudre l'equation diophantienne d*8-k*6= 2. les solutions d sont de la forme 3x +1. 

2  Codage d’un fichier en base 64.
2.2  Encodage

Les reponses se trouvent dans le fichier codage64.py

3. Décodage d’un fichier au format base 64

Les reponses se trouvent dans le fichier codage64.py

4. Réalisation de l’utilitaire base64

Q11. On a encodé l'image logo_FIL.png en base64 utilisant la commande '& base64 nom_fichier' d'un terminal et avec la fonction python 'usage()'. On a enregistré l'information encodé dans la base 64 dans 2 fichiers texte differents: image64-terminal.txt (pour le fichier encodé depuis le terminal) et 
                  image64-python.txt (pour le fichier encodé utilisant notre fonction python).
Pour vérifier que ces deux fichiers sont indentiques on a utilisé le module filecmp du python.
>>> import filecmp
>>> filecmp.cmp('image64-terminal.txt', 'image64-python.txt')
True

En vérifiant depuis le terminal avec la commande diff on a obtenu le même résultat.
Donc, notre fonction d'encodage fonctionne bien. 
Pour vérifier si la fonction de decodage est bien fait, nous allons decoder ces fichiers('image64-python.txt et image64-terminal.txt) depuis le terminal(>& base64 -d nom_fichier) et en utlisant la fonction 'usage()'. Après le decodage de ces fichiers texte on compare le résultat obtenu. 
Nous pouvons voir qu'on a obtenu le même résultat donc, la fonction de decodage est bien realisée.  
